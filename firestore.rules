rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() { return request.auth != null; }

    // 管理员：从 meta/admins 文档的 uids 白名单判断（固定登录账号的 UID 放这里）
    function isAdminByMeta() {
      return isAuth()
        && exists(/databases/$(database)/documents/meta/admins)
        && (request.auth.uid in get(/databases/$(database)/documents/meta/admins).data.uids);
    }
    function isAdmin() { return isAdminByMeta(); }

    // —— 系统配置：管理员白名单（首次用控制台手工创建 meta/admins.uids 数组）——
    match /meta/admins {
      allow read: if isAuth();         // 登录用户可读取（前端可据此显示是否为管理员）
      allow create, update: if isAdmin();  // 仅管理员可增删改白名单
      allow delete: if false;
    }

    // —— 在线用户（左侧列表）——
    match /users/{uid} {
      allow read: if isAuth();

      // 仅本人可写；防止客户端试图写入危险角色字段（即使写了，本方案也不靠 roles 判权）
      allow create, update: if isAuth() && request.auth.uid == uid
        && !( "roles" in request.resource.data && request.resource.data.roles.hasAny(["admin","root"]) );

      allow delete: if false;
    }

    // —— 昵称占用（可选）——
    match /nicknames/{name} {
      allow read: if true;
      allow create: if isAuth() && !exists(resource.path);
      allow update, delete: if false;
    }

    // —— 公聊 —— 
    match /messages/{id} {
      allow read: if true;         // 任何人可读
      allow create: if isAuth();   // 登录（匿名也算）即可发
      allow update, delete: if false;
    }

    // —— 私聊：/dm/{mid}，文档需包含 parties: [uidA, uidB] —— 
    match /dm/{mid} {
      // 读：仅参与者或管理员
      allow read: if isAuth()
        && (request.auth.uid in resource.data.parties || isAdmin());

      // 写：仅参与者，且校验 parties 合法
      allow create: if isAuth()
        && (request.resource.data.parties is list)
        && request.resource.data.parties.size() == 2
        && request.resource.data.parties[0] != request.resource.data.parties[1]
        && (request.auth.uid in request.resource.data.parties);

      allow update, delete: if false;
    }
  }
}
